generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  name            String
  email           String          @unique
  googleId        String?         @unique
  password        String?
  likedSongs      LikedSong[]
  playlists       Playlist[]
  posts           Post[]
  friendsAsUser1  Friends[]       @relation("UserFriends1")
  friendsAsUser2  Friends[]       @relation("UserFriends2")
  sendRequest     FriendRequest[] @relation("SentRequests")
  recievedRequest FriendRequest[] @relation("ReceivedRequests")
  FriendChat      ChatFriends[]
}

model Friends {
  id        String    @id @default(uuid())
  user1     User      @relation("UserFriends1", fields: [user1Id], references: [id])
  user1Id   String
  user1Name String
  user2     User      @relation("UserFriends2", fields: [user2Id], references: [id])
  user2Id   String
  user2Name String
  createdAt DateTime  @default(now())
  messages  Message[] @relation("FriendMessages")
}

model Message {
  id         String   @id @default(uuid())
  friend     Friends  @relation("FriendMessages", fields: [friendId], references: [id])
  friendId   String
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
}

model FriendRequest {
  id           String @id @default(uuid())
  senderId     String
  sender       User   @relation("SentRequests", fields: [senderId], references: [id])
  receiverId   String
  receiver     User   @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverName String
  status       String // "PENDING" "ACCEPTED" "REJECTED"
}

model ChatFriends {
  id         String @id @default(uuid())
  userId     String
  friendId   String
  friendName String
  relationId String
  Friend     User   @relation(fields: [friendId], references: [id])
}

model LikedSong {
  id                  String @id @default(uuid())
  userId              String
  user                User   @relation(fields: [userId], references: [id])
  songId              String
  songName            String
  songArtistPrimary   String
  songArtistSecondary String
  songImage           String
}

model Playlist {
  id          String         @id @default(uuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  songs       PlaylistSong[]
  title       String
  description String
}

model PlaylistSong {
  id                  String   @id @default(uuid())
  playlistId          String
  Playlist            Playlist @relation(fields: [playlistId], references: [id])
  songId              String
  songName            String
  songArtistPrimary   String
  songArtistSecondary String
  songImage           String
}

model Post {
  id                Int      @id @default(autoincrement())
  userId            String
  User              User     @relation(fields: [userId], references: [id])
  description       String
  audioStartTime    String
  audioEndTime      String
  imageDownloadLink String
  location          String
  audioLink         String
  createdAt         DateTime @default(now())
}
